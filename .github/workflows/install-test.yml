# Copyright (c) 2025, NVIDIA CORPORATION. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This workflow verifies that the basic install works across all supported platforms.
# For basic install, all imports need to either be successful or appropriately guarded.

name: Installation Test

on:
  push:
    branches:
      - main
      - "pull-request/[0-9]+"
      - "deploy-release/*"
env:
  UV_PROJECT_ENVIRONMENT: "./venv"

jobs:
  pre-flight:
    uses: NVIDIA-NeMo/FW-CI-templates/.github/workflows/_cicd_preflight.yml@v0.53.0

  pip-test-bare-metal:
    needs: [pre-flight]
    if: |
      !(needs.pre-flight.outputs.docs_only == 'true'
      || needs.pre-flight.outputs.is_deployment_workflow == 'true')
    runs-on: ${{ matrix.arch }}
    name: Pip - Python${{ matrix.python-version }} - ${{ matrix.arch == 'ubuntu-latest' && 'AMD64/Linux' || 'ARM64/Darwin' }} - No CUDA
    strategy:
      fail-fast: false
      matrix:
        arch: ["ubuntu-latest"]
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install CUDA Toolkit and cuDNN headers for Ubuntu 22.04
        run: |
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2404/x86_64/cuda-keyring_1.1-1_all.deb
          sudo dpkg -i cuda-keyring_1.1-1_all.deb
          sudo apt-get update
          sudo apt-get install -y cuda-toolkit-12-8 cudnn-cuda-12 libcudnn9-cuda-12
          sudo apt-get clean

      - name: Install Python ${{ matrix.python-version }}
        env:
          ARCH: ${{ matrix.arch }}
        run: |
          sudo add-apt-repository ppa:deadsnakes/ppa -y
          sudo apt-get update
          sudo apt-get install -y python3 python${{ matrix.python-version }} python${{ matrix.python-version }}-venv
          sudo apt-get clean

          python${{ matrix.python-version }} -m venv ./venv
          . ./venv/bin/activate
          pip install --pre --no-cache-dir --pre --no-cache-dir --upgrade pip

      - name: Install project
        run: |
          export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
          pip install --pre --no-cache-dir torch pybind11 wheel_stub numpy
          pip install --pre --no-cache-dir --no-build-isolation .

      - name: Checkout check-imports
        uses: actions/checkout@v4
        with:
          repository: NVIDIA-NeMo/FW-CI-templates
          ref: v0.39.0
          path: FW-CI-templates

      - name: Check imports for megatron-bridge
        uses: ./FW-CI-templates/.github/actions/check-imports
        with:
          package-name: megatron.bridge
          python-binary: python

  pip-test-cuda:
    needs: [pre-flight]
    if: |
      !(needs.pre-flight.outputs.docs_only == 'true'
      || needs.pre-flight.outputs.is_deployment_workflow == 'true')
    runs-on: linux-amd64-cpu16
    name: Pip - Python${{ matrix.python-version }}${{ matrix.extra-groups != '' && format('[{0}]', matrix.extra-groups) || '' }} - AMD64/Linux - NGC CUDA
    container:
      image: nvcr.io/nvidia/cuda:12.8.1-cudnn-devel-ubuntu24.04
    environment: nemo-ci
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
        extra-groups: ["", "recipes"]
    env:
      EXTRA: ${{ matrix.extra-groups != '' && format('[{0}]', matrix.extra-groups) || '' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install megatron-bridge${{ matrix.extra-groups != '' && format('[{0}]', matrix.extra-groups) || '' }}
        shell: bash -x -e -u -o pipefail {0}
        run: |
          apt-get update
          apt-get install -y python3 python3.12 python3.12-venv python3.12-dev
          python3 -m venv ./venv

          . ./venv/bin/activate

          pip install --pre --no-cache-dir --upgrade pip
          pip install --pre --no-cache-dir torch pybind11 wheel_stub
          pip install --pre --no-cache-dir --no-build-isolation .$EXTRA

      - name: Checkout check-imports
        uses: actions/checkout@v4
        with:
          repository: NVIDIA-NeMo/FW-CI-templates
          ref: v0.39.0
          path: FW-CI-templates

      - name: Check imports for megatron-bridge
        uses: ./FW-CI-templates/.github/actions/check-imports
        with:
          package-name: megatron.bridge
          python-binary: ./venv/bin/python

  uv-test-cuda:
    needs: [pre-flight]
    if: |
      !(needs.pre-flight.outputs.docs_only == 'true'
      || needs.pre-flight.outputs.is_deployment_workflow == 'true')
    runs-on: linux-amd64-cpu16
    name: UV - Python${{ matrix.python-version }} - AMD64/Linux - NGC CUDA
    container:
      image: nvcr.io/nvidia/cuda:12.8.1-cudnn-devel-ubuntu24.04
    environment: nemo-ci
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install wget
        run: |
          apt-get update
          apt-get install -y wget git libopenmpi-dev

      - name: Upgrade pip
        run: |
          python -m pip install --pre --no-cache-dir --pre --no-cache-dir --upgrade pip

      - name: Set up UV
        uses: astral-sh/setup-uv@v1
        with:
          version: 0.7.2

      - name: Set up yq
        shell: bash
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.45.4/yq_linux_amd64.tar.gz
          tar -xzf yq_linux_amd64.tar.gz
          mkdir -p ./bin
          mv yq_linux_amd64 ./bin/yq 
          chmod +x ./bin/yq

      - name: Install project
        env:
          PAT: ${{ secrets.PAT }}
        shell: bash
        run: |
          echo -e "machine github.com\n  login token\n  password ${{ secrets.PAT }}" > ~/.netrc
          chmod 600 ~/.netrc 

          uv venv ${UV_PROJECT_ENVIRONMENT} --system-site-packages
          source ./venv/bin/activate

          export PATH="./bin/:$PATH"

          uv sync --link-mode copy --locked --only-group build
          uv sync --link-mode copy --locked --all-groups

      - name: Checkout check-imports
        uses: actions/checkout@v4
        with:
          repository: NVIDIA-NeMo/FW-CI-templates
          ref: v0.39.0
          path: FW-CI-templates

      - name: Check imports for megatron-bridge
        uses: ./FW-CI-templates/.github/actions/check-imports
        with:
          package-name: megatron.bridge
          python-binary: ./venv/bin/python

  uv-test-bare-metal:
    needs: [pre-flight]
    if: |
      !(needs.pre-flight.outputs.docs_only == 'true'
      || needs.pre-flight.outputs.is_deployment_workflow == 'true')
    runs-on: linux-amd64-cpu16
    name: UV - Python ${{ matrix.python-version }} - 'AMD64/Linux' - No CUDA
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up UV
        uses: astral-sh/setup-uv@v1
        with:
          version: 0.7.2

      - name: Install CUDA Toolkit for Ubuntu 22.04
        run: |
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2404/x86_64/cuda-keyring_1.1-1_all.deb
          sudo dpkg -i cuda-keyring_1.1-1_all.deb
          sudo apt-get update
          sudo apt-get install -y cuda-toolkit-12-8
          sudo apt-get clean

      - name: Install cuDNN headers
        run: |
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.1-1_all.deb
          sudo dpkg -i cuda-keyring_1.1-1_all.deb
          sudo apt-get update
          sudo apt-get install -y cudnn-cuda-12
          sudo apt-get clean

      - name: Install Python ${{ matrix.python-version }}
        env:
          ARCH: ${{ matrix.arch }}
        run: |
          sudo add-apt-repository ppa:deadsnakes/ppa -y
          sudo apt-get update
          sudo apt-get install -y python3 python${{ matrix.python-version }} python${{ matrix.python-version }}-venv
          sudo apt-get clean

          python${{ matrix.python-version }} -m venv ./venv
          . ./venv/bin/activate
          pip install --pre --no-cache-dir --upgrade pip

      - name: Install dependencies with UV
        run: |
          uv venv ${UV_PROJECT_ENVIRONMENT} --system-site-packages

          uv sync --link-mode copy --locked --only-group build --no-cache
          uv sync --link-mode copy --locked --all-groups --no-cache

      - name: Checkout check-imports
        uses: actions/checkout@v4
        with:
          repository: NVIDIA-NeMo/FW-CI-templates
          ref: v0.39.0
          path: FW-CI-templates

      - name: Check imports for megatron-bridge
        uses: ./FW-CI-templates/.github/actions/check-imports
        with:
          package-name: megatron.bridge
          python-binary: ./venv/bin/python

  install-test-summary:
    needs: [pre-flight, pip-test-bare-metal, pip-test-cuda, uv-test-bare-metal, uv-test-cuda]
    runs-on: ubuntu-latest
    name: Install test summary
    if: |
      (
        needs.pre-flight.outputs.docs_only == 'true'
        || needs.pre-flight.outputs.is_deployment_workflow == 'true'
        || success()
      )
      && !cancelled()
    steps:
      - name: Result
        run: echo Install check successful
